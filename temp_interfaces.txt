import { ReactNode } from "react";

export interface TextContentProps {
  /** TÃ­tulo do conteÃºdo */
  title?: string | ReactNode;
  /** Array de parÃ¡grafos do conteÃºdo */
  paragraphs: (string | ReactNode)[];
  /** NÃºmero de quebras de linha */
  lineBreaks?: number;
  /** CSS customizado para margin e padding */
  customCss?: {
    marginTop?: string;
    marginBottom?: string;
    paddingTop?: string;
    paddingBottom?: string;
    paragraphWidth?: string;
    titleGap?: string;
  };
}

export interface ContentSectionProps {
  /** TÃ­tulo da seÃ§Ã£o */
  title?: string;
  /** SubtÃ­tulo da seÃ§Ã£o */
  subtitle?: string;
  /** ConteÃºdo da seÃ§Ã£o */
  children: ReactNode;
  /** CSS customizado para margin */
  customCss?: {
    marginTop?: string;
    marginBottom?: string;
    /** PosiÃ§Ã£o do tÃ­tulo: 'left' (padrÃ£o), 'center' ou 'right' */
    titlePosition?: "left" | "center" | "right";
  };
}

export interface ChapterProps {
  /** Identificador Ãºnico do capÃ­tulo */
  id: string;
  /** TÃ­tulo do capÃ­tulo */
  title?: string;
  /** SubtÃ­tulo do capÃ­tulo */
  subtitle?: string;
  /** ConteÃºdo do capÃ­tulo */
  children: React.ReactNode;
  /** Classes CSS personalizadas */
  className?: string;
  /** CSS customizado para margin */
  customCss?: {
    marginTop?: string;
    marginBottom?: string;
    paddingTop?: string;
    paddingLeft?: string;
  };
  /** ForÃ§a uma cor de fundo especÃ­fica, sobrescrevendo a alternÃ¢ncia automÃ¡tica */
  forceBackgroundColor?: string;
}

export interface ContentBlockProps {
  /** ConteÃºdo do bloco */
  children: React.ReactNode;
  /** Classes CSS personalizadas */
  className?: string;
  /** CSS customizado para margin e gap */
  customCss?: {
    marginTop?: string;
    marginBottom?: string;
    gap?: string;
  };
  /** Se deve ocupar toda a largura */
  fullWidth?: boolean;
}

export interface CaseTitleHeaderProps {
  /** Identificador Ãºnico do cabeÃ§alho */
  id: string;
  /** TÃ­tulo do cabeÃ§alho */
  title: string;
  /** SubtÃ­tulo do cabeÃ§alho */
  subtitle?: string | ReactNode;
  /** Variante do subtÃ­tulo */
  subtitleVariant?: "default" | "paragraph";
  /** Se o subtÃ­tulo deve ser branco */
  subtitleWhite?: boolean;
  /** Classes CSS personalizadas */
  className?: string;
  /** CSS customizado para margin e padding */
  customCss?: {
    marginTop?: string;
    marginBottom?: string;
    paddingTop?: string;
    paddingBottom?: string;
  };
}

export interface CardsEnumeradosInterface {
  /** TÃ­tulo do card */
  title: string;
  /** Texto do card */
  text: string;
}

export interface InsightCardsProps {
  /** Imagem do card */
  img: string;
  /** Texto do insight */
  text: string;
  /** Texto da imagm */
  alt?: string;
  /** TÃ­tulo opcional do card */
  title?: string;
  /** Gap entre imagem e texto */
  gap?: string;
}

export interface SimpleVerticalTimelineItem {
  /** Titulo do step da timeline */
  title: string;
  /** Texto da descriÃ§Ã£o que fica debaixo do title da timeline */
  description: string;
}

export interface SimpleVerticalTimelineProps {
  /** Array de items da timeline */
  items: SimpleVerticalTimelineItem[];
  /** Cor dos dots e traÃ§os (padrÃ£o: #BBBBBB) */
  dotColor?: string;
}

export interface TimelineDotsProps {
  /** NÃºmero de itens para criar os pontos */
  itemsCount: number;
}

export interface ProcessStep {
  title: string;
  lists: string[];
}

export type ProcessDataApp = ProcessStep[];

export type ListByTypeProps = {
  title: string;
  description: string;
};

export type QuoteProps = {
  text: string;
  title?: string;
};


export interface ImgProps {
  src: string
  alt: string
}

export interface VersionShowcaseProps {
  imgs: ImgProps[];
  title: string;
  description: string;
  date: string;
}
